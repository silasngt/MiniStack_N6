// File: controllers/admin/adminProfile.controller.ts
import { Request, Response } from 'express';
import User from '../../models/user.model';
import md5 from 'md5';

// ‚úÖ HELPER: Get current user ID from session
const getCurrentUserId = (req: Request): number | null => {
  const adminUser = (req.session as any)?.adminUser;
  return adminUser?.id || null;
};

// [GET] /admin/profile
export const index = async (req: Request, res: Response): Promise<void> => {
  try {
    // ‚úÖ FIX: L·∫•y user ID t·ª´ session thay v√¨ hardcode
    const currentUserId = getCurrentUserId(req);

    if (!currentUserId) {
      res.redirect('/admin/auth/login');
      return;
    }

    console.log('üë§ Loading profile for user ID:', currentUserId);

    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const currentUser = await User.findByPk(currentUserId);

    if (!currentUser || currentUser.get('deleted')) {
      res.status(404).render('admin/pages/404', {
        pageTitle: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
      });
      return;
    }

    const userData = currentUser.toJSON();

    // Format data ƒë·ªÉ hi·ªÉn th·ªã
    const profileData = {
      userID: userData.UserID,
      fullName: userData.FullName || 'Ch∆∞a c·∫≠p nh·∫≠t',
      email: userData.Email || '',
      avatar:
        userData.Avatar ||
        'https://e7.pngegg.com/pngimages/349/288/png-clipart-teacher-education-student-course-school-avatar-child-face.png',
      gender: userData.Gender || 'Ch∆∞a c·∫≠p nh·∫≠t',
      role: userData.Role || 'User',
      status: userData.status || 'active',
      phone: userData.Phone || '',
    };

    res.render('admin/pages/profile/index.pug', {
      pageTitle: 'Th√¥ng tin c√° nh√¢n',
      profile: profileData,
    });
    return;
  } catch (error) {
    console.error('‚ùå Error loading profile:', error);
    res.status(500).render('admin/pages/500', {
      pageTitle: 'L·ªói h·ªá th·ªëng',
    });
    return;
  }
};

// [POST] /admin/profile/update-basic
export const updateBasicInfo = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    // ‚úÖ FIX: L·∫•y user ID t·ª´ session
    const currentUserId = getCurrentUserId(req);

    if (!currentUserId) {
      res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!',
      });
      return;
    }

    const { fullName, gender, phone } = req.body;

    console.log('üìù Updating basic info for user:', currentUserId);

    if (!fullName || fullName.trim().length === 0) {
      res.status(400).json({
        success: false,
        message: 'H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!',
      });
      return;
    }

    // Validate phone format (optional)
    if (phone && phone.trim().length > 0) {
      const phoneRegex = /^[\+]?[0-9\-\s\(\)]{8,20}$/;
      if (!phoneRegex.test(phone.trim())) {
        res.status(400).json({
          success: false,
          message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!',
        });
        return;
      }
    }

    // T√¨m user hi·ªán t·∫°i
    const currentUser = await User.findByPk(currentUserId);
    if (!currentUser || currentUser.get('deleted')) {
      res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!',
      });
      return;
    }

    await currentUser.update({
      FullName: fullName.trim(),
      Gender: gender || null,
      Phone: phone ? phone.trim() : null,
    });

    // ‚úÖ UPDATE: Session data v·ªõi th√¥ng tin m·ªõi
    const adminUser = (req.session as any).adminUser;
    if (adminUser) {
      adminUser.name = fullName.trim();
      (req.session as any).adminUser = adminUser;
    }

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!',
      data: {
        fullName: fullName.trim(),
        gender: gender,
        phone: phone?.trim() || '',
      },
    });
    return;
  } catch (error) {
    console.error('‚ùå Error updating basic info:', error);
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin!',
    });
    return;
  }
};

// [POST] /admin/profile/change-password
export const changePassword = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    // ‚úÖ FIX: L·∫•y user ID t·ª´ session
    const currentUserId = getCurrentUserId(req);

    if (!currentUserId) {
      res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!',
      });
      return;
    }

    // Ch·ªâ nh·∫≠n newPassword v√† confirmPassword
    const { newPassword, confirmPassword } = req.body;

    console.log('üîë Change password request for user:', currentUserId);

    // Validation
    if (!newPassword || !confirmPassword) {
      res.status(400).json({
        success: false,
        message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!',
      });
      return;
    }

    if (newPassword !== confirmPassword) {
      res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!',
      });
      return;
    }

    if (newPassword.length < 6) {
      res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!',
      });
      return;
    }

    // T√¨m user hi·ªán t·∫°i
    const currentUser = await User.findByPk(currentUserId);
    if (!currentUser || currentUser.get('deleted')) {
      res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!',
      });
      return;
    }

    // Hash m·∫≠t kh·∫©u m·ªõi v·ªõi MD5
    const newPasswordMD5 = md5(newPassword);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    await currentUser.update({
      Password: newPasswordMD5,
    });

    res.json({
      success: true,
      message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!',
    });
    return;
  } catch (error) {
    console.error('‚ùå Error changing password:', error);
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi ƒë·ªïi m·∫≠t kh·∫©u!',
    });
    return;
  }
};

// [POST] /admin/profile/upload-avatar
export const uploadAvatar = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    // ‚úÖ FIX: L·∫•y user ID t·ª´ session
    const currentUserId = getCurrentUserId(req);

    if (!currentUserId) {
      res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!',
      });
      return;
    }

    // Avatar URL s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi uploadCloud middleware
    const avatarUrl = req.body.avatar;

    console.log('üì∏ Uploading avatar for user:', currentUserId);

    if (!avatarUrl) {
      res.status(400).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y file ·∫£nh!',
      });
      return;
    }

    // T√¨m user hi·ªán t·∫°i
    const currentUser = await User.findByPk(currentUserId);
    if (!currentUser || currentUser.get('deleted')) {
      res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!',
      });
      return;
    }

    // C·∫≠p nh·∫≠t avatar
    await currentUser.update({
      Avatar: avatarUrl,
    });

    // ‚úÖ UPDATE: Session data v·ªõi avatar m·ªõi
    const adminUser = (req.session as any).adminUser;
    if (adminUser) {
      adminUser.Avatar = avatarUrl;
      (req.session as any).adminUser = adminUser;
    }

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!',
      data: {
        avatarUrl: avatarUrl,
      },
    });
    return;
  } catch (error) {
    console.error('‚ùå Error uploading avatar:', error);
    res.status(500).json({
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra khi t·∫£i ·∫£nh l√™n!',
    });
    return;
  }
};
